using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using OpenIso8583Net.Formatter;
using OpenIso8583Net.TermAppIso;

namespace OpenIso8583Net.Tests.TermAppIso
{
    [TestClass]
    public class TermAppIsoUnpackTests
    {
        [TestMethod]
        public void TestUnpackAscii()
        {
            var data = Formatters.Binary.GetBytes("413138313430323330303030303032433030303030303232373133303035353030303030323134303232373135303035353830303838373737373132383837373737312020202020202020");
            var rsp = new Iso8583TermApp(data);
        }

        [TestMethod]
        public void TestUnpackBinary()
        {
            var data = Formatters.Binary.GetBytes("4231323130723404112BC58400313634373631373339303031303130323637303030303030303030303030303030393030303330333130333534333030303030313134303330333130333534333135313230303030303030303030303030303031343032323830363439323931313334343736313733393030313031303236373D31353132323031313335303634363038393030303030303030323030373030303230313838373737373137383837373737312020202020202020303638303034303443303030303030303030303030303030304430303030303030303030303031343034433030303030303030303030303030303044303030303030303030303030303734F00047C200383837373737313730303030303120202020203131544149534F537263312020204232344B656E796120202020303030303031303030303031426172636C61797354477270343034303630343030323834304330303030303030313030303034303031383430443030303030303031303030303030353334303444303030303030303030393030");
            var rsp = new Iso8583TermApp(data);
        }

        [TestMethod]
        public void UnpackEmv()
        {
            var data = Formatters.Binary.GetBytese3430343032303030353334303444303030303030303030393030303135ff210c910af116e7b6a9135ba23030");
            var rsp = new Iso8583TermApp(data);
            Assert.AreEqual(Iso8583TermApp.MsgType._1210_TRAN_REQ_RSP, rsp.MessageType);
            Assert.AreEqual("FF210C910AF116E7B6A9135BA23030", rsp[55]);
        }

        [TestMethod]
        public void UnpackMac()
        {
            var data =
                Formatters.Binary.GetBytes(

            var rsp = new Iso8583TermApp(data);
            Assert.AreEqual("4435453430373130", rsp[Iso8583TermApp.Bit._064_MAC]);
        }
    }
}
